# Phase 1: Introduction

This React code is designed to build a Profile Card component, which can display personal details of any individual such as their name, role, location, bio, skills, statistics, and social links. The idea is to create a reusable and interactive UI component that can be customized for different people by simply passing different props. Instead of hardcoding information, the component accepts data dynamically, making it flexible and scalable. The styling part is separated into an external CSS file (App.css), which keeps the design neat and professional.



# Phase 2: Component Structure

The main component in this code is ProfileCard. It receives several props:

name: The person’s name.

role: Their role or designation.

location: Where they live.

bio: A short description or introduction.

avatarUrl: Profile picture (or a default image if not provided).

skills: An array of skills that will be displayed as small chips.

stats: An object containing followers and projects count.

links: An object with social links like Website, GitHub, or X (Twitter).

All these props make the card reusable because you can change the data without touching the layout or code structure.



# Phase 3: State Management

The most important key function used in this code is React’s useState hook. It is used to manage the "Follow" button functionality.

## const [following, setFollowing] = useState(false);

Here, following is a boolean state variable, and setFollowing is the function used to update its value. By default, the button shows "Follow". When the user clicks on it, the onClick event toggles the state, switching the text to "Following". This demonstrates how React updates the UI automatically when state changes, making the component interactive.



# Phase 4: PropTypes and DefaultProps

To make the component safer and easier to use, PropTypes are defined. They specify the expected data types for each prop (e.g., name must be a string, stats must be an object). This helps in debugging and prevents errors if wrong data is passed.

In addition, defaultProps are provided. This means that if no data is given, the component will still render with fallback values, such as a placeholder avatar, zero stats, and empty text fields. This ensures the component never breaks.



# Phase 5: Rendering and Styling

The App component imports and renders the ProfileCard, passing real data for a sample person (Raju Kumar). The structure is styled using App.css, which gives the card a clean layout:

A circular profile picture.

Proper spacing and typography.

Skills shown as small chips with rounded edges.

A "Follow" button styled in blue with hover effects.

Links styled in blue with underline effects on hover.

This separation of logic (React code) and design (CSS) improves readability and maintainability.



# Phase 6: Conclusion

In conclusion, this Profile Card demonstrates how React can be used to create interactive, reusable, and well-structured UI components. The use of useState makes the button dynamic, PropTypes ensures type safety, and defaultProps guarantees fallback values. The external CSS adds design consistency. Overall, this project is a great example of combining React concepts like props, state, event handling, and reusable components with clean styling to build real-world applications.